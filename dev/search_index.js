var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RemoteLogging","category":"page"},{"location":"#RemoteLogging","page":"Home","title":"RemoteLogging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RemoteLogging.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RemoteLogging]","category":"page"},{"location":"#RemoteLogging.ConsoleRemoteLogger-Tuple{}","page":"Home","title":"RemoteLogging.ConsoleRemoteLogger","text":"ConsoleRemoteLogger(; [kwargs...])\n\nCreate a logger that sends log messages over TCP as text.\n\nFor full help of keyword arguments, see RemoteLogger\n\nTo change formatting of the logger, pass a function that accepts IO and returns a FormatLogger using that IO. This formatter will be used as tthe final sink in ConsoleRemoteLogger. Otherwise, Logging.ConsoleLogger is used.\n\nExample\n\n# assuming that a listener has already been set up\nlogger = ConsoleRemoteLogger(; port=50010)\nwith_logger(logger) do\n    @debug \"debug\"\n    @info \"info\"\nend\nclose(logger)\n\nIn this case, only the info message should be transported over the network.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.ProgressRemoteLogger-Tuple{}","page":"Home","title":"RemoteLogging.ProgressRemoteLogger","text":"ProgressRemoteLogger(; [host,] [port])\n\nCreate a logger that sends ProgressLogging.Progress information over TCP.\n\nExample\n\n# assuming that a listener has already been set up\nlogger = ProgressRemoteLogger(; port=50011)\nwith_logger(logger) do\n    @progress for i=1:10\n        sleep(0.1)\n    end\nend\nclose(logger)\n\nThe progress message should appear on the remote listener.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.RemoteLogger-Tuple{}","page":"Home","title":"RemoteLogging.RemoteLogger","text":"RemoteLogger(; [kwargs...])\n\nA combined ConsoleRemoteLogger and ProgressRemoteLogger. Log messages and progress bars produced with this logger will appear in the remote listener.\n\nArguments\n\nhost: IP address of the listener. The listener should be running in advance.\nport: Port of the listener. port and port+1 will be used.\nconsole_displaywidth: intended width of the log viewer. It can be used by the printer. RemoteLogging's default listener does not use this value.\nconsole_loglevel: minimum log level to be sent to the remote console\nconsole_formatter: extra formatter for console. It should be a function that accepts a logger and combine it with a another compositional logger.\nconsole_exclude_group: log groups to ignore. Log messages with this group will not be sent to ConsoleRemoteLogger. Ignores :ProgressLogging by default.\nconsole_exclude_module: source modules to ignore in console. Log messages that used to be hidden because it originates from another library will not be filtered here. Specify them here so that they will not be sent.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.activate_listener","page":"Home","title":"RemoteLogging.activate_listener","text":"activate_listener(host, port; [autoclose])\n\nStart both progress and message listener using given host and port, port+1. If block is true, block the console, and clear the screen whenever a new line (enter) is pressed. To close the listener and disconnect the server, use Ctrl+C.\n\n\n\n\n\n","category":"function"},{"location":"#RemoteLogging.console_example_formatter-Tuple{IOContext}","page":"Home","title":"RemoteLogging.console_example_formatter","text":"An exmaple for implementing formatter for ConsoleRemoteLogger.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.group_module_filter-Tuple{Any, Any, Any}","page":"Home","title":"RemoteLogging.group_module_filter","text":"group_module_filter(logger, ex_group, ex_module)\n\nCombined EarlyFilteredLogger that filters based on module and group of the log.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.listen_message","page":"Home","title":"RemoteLogging.listen_message","text":"listen_message(host, port, [io])\n\nListen to incoming messages and print them. The formatting of the messages should be set in the RemoteLogger.\n\n\n\n\n\n","category":"function"},{"location":"#RemoteLogging.listen_progress-Tuple{Any, Any}","page":"Home","title":"RemoteLogging.listen_progress","text":"listen_progress(host, port)\n\nListen to progress messages and show it.\n\n\n\n\n\n","category":"method"},{"location":"#RemoteLogging.root_module-Tuple{Module}","page":"Home","title":"RemoteLogging.root_module","text":"root_module(m)\n\nFind the root module of the given module. Useful for filtering out modules in log messages.\n\n\n\n\n\n","category":"method"}]
}
